import React from 'react';

import CommentList from '../components/CommentList';
import CommentForm from '../components/CommentForm';

import 'whatwg-fetch';

var App = React.createClass({
  loadCommentsFromServer: function() {
      fetch(this.props.url)
        .then((res) => res.json())
        .then((data) => this.setState({data}))
        .catch((ex) => console.error(this.props.url, ex));
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    fetch(this.props.url, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(comment)
    })
        .then((res) => res.json())
        .then((data) => this.setState({data}))
        .catch((ex) => console.error(this.props.url, ex));
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    // setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

export default App;
