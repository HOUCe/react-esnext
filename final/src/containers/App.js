// Module imports to load in dependencies
// Uses default, named & unnamed imports
import React, {Component, PropTypes} from 'react';
import CommentList from '../components/CommentList';
import CommentForm from '../components/CommentForm';
import 'whatwg-fetch';

// Class definition (formerly React.createClass)
// Module export as default
export default class App extends Component {
    // Static propTypes definition (formerly )
    static propTypes = {
        url: PropTypes.string.isRequired,
        pollInterval: PropTypes.number
    }

    static defaultProps = {
        pollInterval: 5000
    }

    state = {
        comments: []
    }

    componentDidMount() {
        this._loadCommentsFromServer();

        this._pollId = setInterval(
            this._loadCommentsFromServer.bind(this),
            this.props.pollInterval
        );
    }

    componentWillUnmount() {
        clearInterval(this._pollId);
    }

    _loadCommentsFromServer() {
        fetch(this.props.url)
            .then((res) => res.json())
            .then((comments) => this.setState({comments}))
            .catch((ex) => console.error(this.props.url, ex));
    }

    _handleCommentSubmit(comment) {
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        let newComment = {...comment, id: Date.now()};
        let newComments = [...this.state.comments, newComment];

        this.setState({comments: newComments});

        fetch(this.props.url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(comment)
        })
            .then((res) => res.json())
            .then((comments) => this.setState({comments}))
            .catch((ex) => console.error(this.props.url, ex));
    }

    render() {
        let {comments} = this.state;

        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList comments={comments} />
                <CommentForm onCommentSubmit={this._handleCommentSubmit.bind(this)} />
            </div>
        );
    }
}
