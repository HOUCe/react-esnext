var Comment = React.createClass({
    propTypes: {
        children: React.PropTypes.node.isRequired,
        author: React.PropTypes.string.isRequired
    },
    _getRawMarkup: function() {
        var md = new Remarkable();
        var rawMarkup = md.render(this.props.children.toString());

        return {__html: rawMarkup};
    },
    render: function() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this._getRawMarkup()} />
            </div>
        );
    }
});

var CommentList = React.createClass({
    propTypes: {
        comments: React.PropTypes.arrayOf(
            React.PropTypes.shape({
                id: React.PropTypes.number.isRequired,
                author: React.PropTypes.string.isRequired,
                text: React.PropTypes.string.isRequired
            })
        ).isRequired
    },
    render: function() {
        var comments = this.props.comments;
        var commentNodes = comments.map(function(comment) {
            return (
                <Comment author={comment.author} key={comment.id}>
                    {comment.text}
                </Comment>
            );
        });

        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});

var CommentForm = React.createClass({
    propTypes: {
        onCommentSubmit: React.PropTypes.func.isRequired
    },
    getInitialState: function() {
        return {author: '', text: ''};
    },
    _updateFormFieldState: function(name, e) {
        var newState = {};

        newState[name] = e.target.value;

        this.setState(newState);
    },
    _handleAuthorChange: function(e) {
        this._updateFormFieldState('author', e);
    },
    _handleTextChange: function(e) {
        this._updateFormFieldState('text', e);
    },
    _handleSubmit: function(e) {
        var author = this.state.author;
        var text = this.state.text;

        e.preventDefault();

        if (!text || !author) {
            return;
        }

        this.props.onCommentSubmit({author: author, text: text});
        this.setState(this.getInitialState());
    },
    render: function() {
        var author = this.state.author;
        var text = this.state.text;

        return (
            <form className="commentForm" onSubmit={this._handleSubmit}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={author}
                    onChange={this._handleAuthorChange}
                />
                <input
                    type="text"
                    placeholder="Say something..."
                    value={text}
                    onChange={this._handleTextChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
});

var App = React.createClass({
    propTypes: {
        url: React.PropTypes.string.isRequired,
        pollInterval: React.PropTypes.number
    },
    getDefaultProps: function() {
        return {
            pollInterval: 5000
        };
    },
    getInitialState: function() {
        return {
            comments: []
        };
    },
    componentDidMount: function() {
        this._loadCommentsFromServer();

        this._pollId = setInterval(this._loadCommentsFromServer, this.props.pollInterval);
    },
    componentWillUnmount: function() {
        clearInterval(this._pollId);
    },
    _loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(comments) {
                this.setState({comments: comments});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    _handleCommentSubmit: function(comment) {
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        var newComment = comment;
        var comments = this.state.comments;
        var newComments;

        newComment.id = Date.now();

        newComments = comments.concat([comment]);
        this.setState({comments: newComments});

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(resComments) {
                this.setState({comments: resComments});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({comments: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    render: function() {
        var comments = this.state.comments;

        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList comments={comments} />
                <CommentForm onCommentSubmit={this._handleCommentSubmit} />
            </div>
        );
    }
});

ReactDOM.render(
    <App url="//localhost:3000/api/comments" pollInterval={2000} />,
    document.getElementById('app')
);
